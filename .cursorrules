# 🎓 PrepWise AI Mock Interview Platform - Cursor Rules
# Classification: ADAMCHINS-CONFIDENTIAL ▲
# Project: PrepWise - AI-powered mock interview platform for business schools
# Version: 2.0 Beta 0.3.2
# Created: 2025-01-27
# Last Updated: June 2025 - Multi-Site Deployment
# Purpose: AI coding assistant rules for consistent development

## 📚 Project Context

You are working on **PrepWise**, an AI-powered mock interview and job preparation platform designed to help students train for professional interviews at scale. This is a B2B SaaS solution primarily targeted at business schools.

### Core Value Proposition:
- **For Business Schools**: Offer personalized, high-quality career coaching at low operational cost
- **For Students**: 24/7 access to realistic interview practice with AI feedback
- **Scalability**: No human bottleneck, unlimited concurrent sessions
- **Data-Driven**: Analytics and insights for career services departments

### Technical Stack:
- **Frontend**: React 18.x with TypeScript
- **Styling**: Inline styles (NO Tailwind) - exact Figma values
- **Build Tool**: Vite with path aliases
- **Routing**: React Router v6
- **i18n**: Custom LanguageContext (French/English)
- **AI/ML**: OpenAI API (GPT-3.5-turbo) for interview simulation
- **Backend**: Currently frontend-only (API integration planned)
- **Authentication**: Login/Register UI ready (backend pending)
- **Infrastructure**: AWS EC2 + Nginx + SSL
- **CI/CD**: GitHub Actions (master branch deployment)

## 🏗️ Architecture Patterns

### 1. Domain-Driven Design Structure
```
src/
├── components/                # Feature components
│   ├── admin/                # Admin-specific components
│   ├── common/               # Shared components (LanguageSelector)
│   ├── landing/              # Landing page components
│   ├── login/                # Auth components
│   └── upload/               # File upload components
├── contexts/                 # React contexts (LanguageContext)
├── pages/                    # All 15 page components
├── services/                 # API services (openai.ts)
├── translations/             # i18n files (en.json, fr.json)
└── design-system/           # Figma tokens and colors
```

### 2. Component Architecture
- Use **functional components** with hooks
- Implement **compound components** for complex UI
- Follow **container/presentation** pattern
- Use **React.memo** for performance optimization

### 3. State Management
- **useState** for local component state
- **Context API** for language selection
- **Route state** for passing data between pages
- **Local storage** for language preference
- **No external state libraries** currently

## 📝 Coding Standards

### 1. File Headers (MANDATORY)
```typescript
/**
 * ADAMCHINS PrepWise
 * Classification: ADAMCHINS-CONFIDENTIAL ▲
 * Component: [ComponentName]
 * Purpose: [What this component does]
 * Why Needed: [Why this exists in the system]
 */
```

### 2. TypeScript Requirements
- **ALWAYS** use TypeScript
- **MANDATORY** type hints for all functions
- Use **interfaces** for object shapes
- Use **union types** for controlled values
- Fix all TypeScript errors before deployment
- Remove unused variables to avoid build failures

### 3. Component Structure
```typescript
// 1. Imports (organized by source)
import { useState, useEffect, useCallback } from 'react';
import { useQuery } from '@tanstack/react-query';
import { Button } from '@/components/ui/button';
import { interviewService } from '../services/InterviewService';

// 2. Types/Interfaces
interface ComponentProps {
  id: string;
  onComplete: (result: InterviewResult) => void;
}

// 3. Component
export function ComponentName({ id, onComplete }: ComponentProps) {
  // 4. State
  const [isLoading, setIsLoading] = useState(false);
  
  // 5. Queries/Mutations
  const { data, isLoading: queryLoading } = useQuery({
    queryKey: ['interview', id],
    queryFn: () => interviewService.getInterview(id),
  });
  
  // 6. Effects
  useEffect(() => {
    // Effect logic
  }, [id]);
  
  // 7. Handlers
  const handleSubmit = useCallback(async () => {
    // Handler logic
  }, []);
  
  // 8. Render
  return (
    <div className="space-y-4">
      {/* Component JSX */}
    </div>
  );
}
```

### 4. Import Organization
```typescript
// 1. React and React ecosystem
import { useState, useEffect } from 'react';
import { useQuery } from '@tanstack/react-query';

// 2. Third-party libraries
import { motion } from 'framer-motion';
import { z } from 'zod';

// 3. Internal UI components
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';

// 4. Internal modules (by domain)
import { interviewService } from '@/modules/interviews/services';
import { useAuthStore } from '@/modules/auth/stores';

// 5. Types and constants
import type { Interview, Student } from '@/types';
import { INTERVIEW_TYPES } from '@/lib/constants';
```

## 🎨 Design System Integration

### 1. Figma Implementation Rules
- Use **inline styles ONLY** - NO Tailwind CSS
- Copy **exact values** from Figma (colors, spacing, fonts)
- Implement **pixel-perfect** designs
- Use **vh units** for hero sections
- Always verify assets exist before coding

### 2. Styling Patterns
```typescript
// Use inline style objects
const buttonStyle = {
  backgroundColor: '#1a4d8c',
  color: '#ffffff',
  padding: '14px 36px',
  borderRadius: '40px',
  border: 'none',
  fontSize: '16px',
  fontWeight: '600',
  cursor: 'pointer',
  transition: 'all 0.2s ease',
};

// Hover effects with event handlers
onMouseEnter={(e) => e.currentTarget.style.backgroundColor = '#163e70'}
onMouseLeave={(e) => e.currentTarget.style.backgroundColor = '#1a4d8c'}
```

### 3. Accessibility Requirements
- **WCAG 2.1 AA** compliance mandatory
- Use **semantic HTML** elements
- Implement **keyboard navigation**
- Add **ARIA labels** and descriptions
- Test with **screen readers**

## 🤖 AI/ML Integration (IMPLEMENTED)

### 1. OpenAI Integration
```typescript
// Current implementation with OpenAI GPT-3.5
import axios from 'axios';

const OPENAI_API_KEY = import.meta.env.VITE_OPENAI_API_KEY;

export async function getInterviewResponse(
  messages: Message[],
  context: InterviewContext
): Promise<string> {
  const response = await axios.post(
    'https://api.openai.com/v1/chat/completions',
    {
      model: 'gpt-3.5-turbo',
      messages: apiMessages,
      temperature: 0.7,
      max_tokens: 150,
    },
    {
      headers: {
        'Authorization': `Bearer ${OPENAI_API_KEY}`,
        'Content-Type': 'application/json'
      }
    }
  );
  return response.data.choices[0].message.content.trim();
}
```

### 2. Performance Optimization
- Use **React.memo** for expensive components
- Implement **lazy loading** for heavy features
- Use **Suspense** with loading states
- Optimize **bundle splitting** by route/feature

### 3. Error Handling
```typescript
// Comprehensive error boundaries
class InterviewErrorBoundary extends Component {
  state = { hasError: false, error: null };
  
  static getDerivedStateFromError(error: Error) {
    return { hasError: true, error };
  }
  
  componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    // Log to monitoring service
    console.error('Interview error:', error, errorInfo);
  }
}
```

## 🌍 Internationalization (IMPLEMENTED)

### 1. Language Support
```typescript
// Custom LanguageContext for i18n
interface LanguageContextType {
  language: 'en' | 'fr';
  setLanguage: (lang: 'en' | 'fr') => void;
  t: (key: string) => string;
}

// Browser language detection
const browserLang = navigator.language || navigator.languages?.[0] || 'en';
const defaultLanguage = browserLang.toLowerCase().startsWith('fr') ? 'fr' : 'en';
```

### 2. Translation Structure
```json
// translations/en.json & fr.json
{
  "nav": {
    "features": "Features",
    "howItWorks": "How it Works",
    "testimonials": "Testimonials",
    "login": "Login",
    "signUp": "Sign Up for Free"
  },
  "hero": {
    "title": "Master Your Interview Skills with AI-Powered Practice",
    "subtitle": "PrepWise provides personalized mock interviews..."
  }
}
```

### 3. Dynamic Language Switching
```typescript
// LanguageSelector component
function LanguageSelector() {
  const { language, setLanguage } = useLanguage();
  
  return (
    <select 
      value={language} 
      onChange={(e) => setLanguage(e.target.value as 'en' | 'fr')}
    >
      <option value="en">English</option>
      <option value="fr">Français</option>
    </select>
  );
}
```

## 🧪 Testing Requirements

### 1. Testing Strategy
- **60% Unit Tests**: Components, hooks, services
- **30% Integration Tests**: API interactions, user flows
- **10% E2E Tests**: Critical user journeys

### 2. Test Structure
```typescript
// Component testing with React Testing Library
describe('InterviewRoom', () => {
  it('starts recording when button is clicked', async () => {
    const onStart = vi.fn();
    render(<InterviewRoom onStartRecording={onStart} />);
    
    await user.click(screen.getByRole('button', { name: /start recording/i }));
    
    expect(onStart).toHaveBeenCalledTimes(1);
  });
});
```

### 3. Mock Patterns
```typescript
// Service mocking
vi.mock('@/modules/interviews/services/InterviewService', () => ({
  interviewService: {
    startInterview: vi.fn(),
    getNextQuestion: vi.fn(),
    submitResponse: vi.fn(),
  },
}));
```

## 🔒 Security & Privacy

### 1. Data Protection
- **FERPA compliance** for educational records
- **GDPR compliance** for EU users
- **Client-side encryption** for sensitive data
- **Secure token storage** with encryption

### 2. Content Security Policy
```typescript
// Strict CSP headers
const cspHeaders = {
  'Content-Security-Policy': [
    "default-src 'self'",
    "script-src 'self' 'unsafe-inline' https://www.google-analytics.com",
    "style-src 'self' 'unsafe-inline' https://fonts.googleapis.com",
    "connect-src 'self' https://api.prepwise.com wss://api.prepwise.com",
    "media-src 'self' blob:",
  ].join('; '),
};
```

### 3. Input Sanitization
```typescript
// Sanitize all user inputs
function sanitizeInput(input: string): string {
  return input
    .replace(/[<>]/g, '')
    .replace(/javascript:/gi, '')
    .replace(/on\w+\s*=/gi, '')
    .trim();
}
```

## 📊 Performance Standards

### 1. Core Web Vitals Targets
- **LCP**: < 2.5s (Largest Contentful Paint)
- **FID**: < 100ms (First Input Delay)
- **CLS**: < 0.1 (Cumulative Layout Shift)

### 2. Bundle Size Limits
- **Initial bundle**: < 250KB gzipped
- **Route chunks**: < 100KB gzipped
- **Vendor chunks**: Split by usage frequency

### 3. Image Optimization
```typescript
// Responsive images with WebP support
<picture>
  <source type="image/webp" srcSet={generateWebPSrcSet(src)} />
  <img src={src} alt={alt} loading="lazy" />
</picture>
```

## 🚀 Development & Deployment

### 1. Git Workflow
```bash
# Current branch structure
develop    # Active development
preprod    # Pre-production testing
master     # Production (triggers CI/CD)

# Deployment flow
git checkout develop
# make changes
git add -A
git commit -m "feat: your feature"
git push origin develop

# Merge to production
git checkout preprod && git merge develop && git push
git checkout master && git merge preprod && git push  # Triggers deployment
```

### 2. Code Quality Gates
- **TypeScript**: No errors, strict mode
- **ESLint**: No warnings or errors
- **Prettier**: Consistent formatting
- **Tests**: 80%+ coverage for new code

### 3. Pre-commit Hooks
```json
{
  "lint-staged": {
    "*.{ts,tsx}": ["eslint --fix", "prettier --write"],
    "*.{json,md,css}": ["prettier --write"]
  }
}
```

## 🎯 Teaching Methodology

### 1. Step-by-Step Approach
- **Theory First**: Explain WHY before HOW
- **Checkpoint Questions**: Verify understanding
- **Practical Application**: Hands-on implementation
- **Verification**: Test what was built

### 2. Interactive Development
- Ask **clarifying questions** before proceeding
- Explain **design decisions** and alternatives
- Provide **learning context** for patterns
- Include **checkpoint confirmations**

### 3. No Black Boxes
- Explain **every component** and its purpose
- Show **how pieces connect** together
- Discuss **trade-offs** and alternatives
- Provide **context** for architectural decisions

## 📋 Current Status & Next Steps

### Completed Features:
- [✓] All 15 pages imported from Figma
- [✓] French/English internationalization
- [✓] OpenAI integration for interviews
- [✓] Production deployment on AWS EC2
- [✓] CI/CD pipeline with GitHub Actions
- [✓] SSL certificates configured
- [✓] Browser language detection
- [✓] Beta 0.2 version deployed
- [✓] Google SSO authentication integration
- [✓] Session-based auth with React Context
- [✓] Camera/microphone permissions for interviews
- [✓] Voice-to-text with Web Speech API
- [✓] Multi-site deployment (prod & staging)
- [✓] Preprod CI/CD pipeline
- [✓] Beta 0.3.2 on staging environment

### Pending Development:
- [ ] Backend API implementation
- [ ] Real authentication system
- [ ] Database integration
- [ ] File upload to S3
- [ ] Email notifications
- [ ] Payment integration
- [ ] Analytics dashboard
- [ ] Mobile app version

### Environment Setup:
```bash
# Local development
cp .env.example .env
# Add: VITE_OPENAI_API_KEY=your-key
npm install
npm run dev

# Production server
ssh -i key.pem ubuntu@prepwise.adamchins.com
cd /var/www/prepwise
sudo nano .env  # Add API key
npm run build
```

### Design Implementation Rules:
- [ ] Use **inline styles ONLY** (no Tailwind)
- [ ] Copy **exact values** from Figma
- [ ] Export all **assets first** before coding
- [ ] Use **underscores** in filenames (no spaces)
- [ ] Match **exact hex colors** from design
- [ ] Test **hover states** and animations

## 🎆 Key URLs & Resources

### Production
- **Live Site (Beta 0.2)**: https://prepwise.adamchins.com
- **Staging Site (Beta 0.3.2)**: https://prep.adamchins.com
- **GitHub**: https://github.com/adamzetos/prepwise
- **EC2 Server**: AWS us-east-1 region
- **CI/CD**: GitHub Actions (master → prod, preprod → staging)

### Design Colors
- Primary Blue: `#1a4d8c`
- Secondary Teal: `#17B0A7`
- Text Dark: `#1f2d3d`
- Text Light: `#6b7b8f`
- Background: `#f9fafb`

### Common Issues & Fixes
- **TypeScript errors**: Remove unused variables
- **Build failures**: Check for unused imports
- **Assets not loading**: Verify file paths start with /
- **API not working**: Check .env file on server

## 🎓 PrepWise Mission

PrepWise helps students succeed in job interviews through AI-powered practice. Currently in Beta 0.3.2 on staging (Beta 0.2 in production), the platform offers bilingual support, Google SSO authentication, camera/mic integration, voice-to-text input, and realistic interview simulations. The goal is to make quality interview preparation accessible to all students, regardless of their school's resources.

## 🔑 Key Development Patterns

### Authentication Flow
- Google SSO via @react-oauth/google
- Session-based auth (sessionStorage)
- Protected routes with ProtectedRoute component
- AuthContext for session management

### Interview Simulation
- Camera/mic preview modal before interview
- Live video feed during interview
- Voice-to-text with language selection (EN/FR)
- Real-time OpenAI responses
- Graceful fallbacks for permissions/API failures

### Deployment Strategy
- Production: prepwise.adamchins.com (stable releases)
- Staging: prep.adamchins.com (beta testing)
- Git flow: develop → preprod → master
- Automated deployments via GitHub Actions 