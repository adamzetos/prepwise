# üéì PrepWise AI Mock Interview Platform - Cursor Rules
# Classification: ADAMCHINS-CONFIDENTIAL ‚ñ≤
# Project: PrepWise - AI-powered mock interview platform for business schools
# Version: 1.0
# Created: 2025-01-27
# Purpose: AI coding assistant rules for consistent development

## üìö Project Context

You are working on **PrepWise**, an AI-powered mock interview and job preparation platform designed to help students train for professional interviews at scale. This is a B2B SaaS solution primarily targeted at business schools.

### Core Value Proposition:
- **For Business Schools**: Offer personalized, high-quality career coaching at low operational cost
- **For Students**: 24/7 access to realistic interview practice with AI feedback
- **Scalability**: No human bottleneck, unlimited concurrent sessions
- **Data-Driven**: Analytics and insights for career services departments

### Technical Stack:
- **Frontend**: React 18.x with TypeScript, Zustand, React Query
- **Styling**: Tailwind CSS + Shadcn/ui components
- **AI/ML**: OpenAI API / Custom LLMs for interview simulation
- **Backend**: FastAPI (Python) for API services
- **Database**: PostgreSQL with Prisma ORM
- **Real-time**: WebSockets for live interview sessions
- **Authentication**: Auth0 for B2B multi-tenant setup
- **Infrastructure**: AWS/Vercel for deployment

## üèóÔ∏è Architecture Patterns

### 1. Domain-Driven Design Structure
```
src/
‚îú‚îÄ‚îÄ modules/                    # Feature modules
‚îÇ   ‚îú‚îÄ‚îÄ auth/                  # Authentication & authorization
‚îÇ   ‚îú‚îÄ‚îÄ interviews/            # Core interview functionality  
‚îÇ   ‚îú‚îÄ‚îÄ analytics/             # Performance tracking
‚îÇ   ‚îú‚îÄ‚îÄ schools/               # B2B tenant management
‚îÇ   ‚îî‚îÄ‚îÄ students/              # User management
‚îú‚îÄ‚îÄ design-system/             # Design system from Figma
‚îú‚îÄ‚îÄ components/                # Shared components
‚îú‚îÄ‚îÄ lib/                       # Utility libraries
‚îú‚îÄ‚îÄ hooks/                     # Global hooks
‚îú‚îÄ‚îÄ stores/                    # Global state (Zustand)
‚îî‚îÄ‚îÄ types/                     # Global TypeScript types
```

### 2. Component Architecture
- Use **functional components** with hooks
- Implement **compound components** for complex UI
- Follow **container/presentation** pattern
- Use **React.memo** for performance optimization

### 3. State Management
- **Zustand** for global state (simple, performant)
- **React Query** for server state management
- **Local state** for component-specific data
- **Context** only for theme/auth providers

## üìù Coding Standards

### 1. File Headers (MANDATORY)
```typescript
/**
 * ADAMCHINS PrepWise
 * Classification: ADAMCHINS-CONFIDENTIAL ‚ñ≤
 * Component: [ComponentName]
 * Purpose: [What this component does]
 * Why Needed: [Why this exists in the system]
 */
```

### 2. TypeScript Requirements
- **ALWAYS** use TypeScript with strict mode
- **MANDATORY** type hints for all functions
- Use **interfaces** for object shapes
- Use **union types** for controlled values
- Prefer **type** over **interface** for simple shapes

### 3. Component Structure
```typescript
// 1. Imports (organized by source)
import { useState, useEffect, useCallback } from 'react';
import { useQuery } from '@tanstack/react-query';
import { Button } from '@/components/ui/button';
import { interviewService } from '../services/InterviewService';

// 2. Types/Interfaces
interface ComponentProps {
  id: string;
  onComplete: (result: InterviewResult) => void;
}

// 3. Component
export function ComponentName({ id, onComplete }: ComponentProps) {
  // 4. State
  const [isLoading, setIsLoading] = useState(false);
  
  // 5. Queries/Mutations
  const { data, isLoading: queryLoading } = useQuery({
    queryKey: ['interview', id],
    queryFn: () => interviewService.getInterview(id),
  });
  
  // 6. Effects
  useEffect(() => {
    // Effect logic
  }, [id]);
  
  // 7. Handlers
  const handleSubmit = useCallback(async () => {
    // Handler logic
  }, []);
  
  // 8. Render
  return (
    <div className="space-y-4">
      {/* Component JSX */}
    </div>
  );
}
```

### 4. Import Organization
```typescript
// 1. React and React ecosystem
import { useState, useEffect } from 'react';
import { useQuery } from '@tanstack/react-query';

// 2. Third-party libraries
import { motion } from 'framer-motion';
import { z } from 'zod';

// 3. Internal UI components
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';

// 4. Internal modules (by domain)
import { interviewService } from '@/modules/interviews/services';
import { useAuthStore } from '@/modules/auth/stores';

// 5. Types and constants
import type { Interview, Student } from '@/types';
import { INTERVIEW_TYPES } from '@/lib/constants';
```

## üé® Design System Integration

### 1. Figma Design Tokens
- Use **CSS custom properties** from design tokens
- Follow **design system components** exactly
- Implement **responsive design** patterns
- Use **Tailwind CSS** with design system classes

### 2. Component Variants
```typescript
// Use class-variance-authority for component variants
import { cva, type VariantProps } from 'class-variance-authority';

const buttonVariants = cva(
  'inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors',
  {
    variants: {
      variant: {
        primary: 'bg-primary text-primary-foreground hover:bg-primary/90',
        secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80',
      },
      size: {
        sm: 'h-9 px-3',
        md: 'h-10 px-4 py-2',
        lg: 'h-11 px-8',
      },
    },
    defaultVariants: {
      variant: 'primary',
      size: 'md',
    },
  }
);
```

### 3. Accessibility Requirements
- **WCAG 2.1 AA** compliance mandatory
- Use **semantic HTML** elements
- Implement **keyboard navigation**
- Add **ARIA labels** and descriptions
- Test with **screen readers**

## ü§ñ AI/ML Integration Patterns

### 1. Interview AI Service
```typescript
// Real-time AI feedback with WebSocket
class InterviewAIService {
  private wsService: WebSocketService;
  
  async startInterview(params: InterviewParams): Promise<InterviewSession> {
    const session = await api.post('/api/interviews/start', params);
    await this.wsService.connect(`/interviews/${session.id}`);
    return session;
  }
  
  async submitResponse(sessionId: string, response: StudentResponse): Promise<AIFeedback> {
    this.wsService.emit('response:submit', { sessionId, ...response });
    return new Promise((resolve) => {
      this.wsService.once('feedback:ready', resolve);
    });
  }
}
```

### 2. Performance Optimization
- Use **React.memo** for expensive components
- Implement **lazy loading** for heavy features
- Use **Suspense** with loading states
- Optimize **bundle splitting** by route/feature

### 3. Error Handling
```typescript
// Comprehensive error boundaries
class InterviewErrorBoundary extends Component {
  state = { hasError: false, error: null };
  
  static getDerivedStateFromError(error: Error) {
    return { hasError: true, error };
  }
  
  componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    // Log to monitoring service
    console.error('Interview error:', error, errorInfo);
  }
}
```

## üè¢ B2B SaaS Considerations

### 1. Multi-Tenant Architecture
```typescript
// Tenant context throughout the app
interface TenantContext {
  school: School;
  features: FeatureFlags;
  branding: BrandingConfig;
}

// Apply tenant-specific styling
function applyTenantBranding(school: School) {
  document.documentElement.style.setProperty('--primary-color', school.primaryColor);
  document.documentElement.style.setProperty('--secondary-color', school.secondaryColor);
}
```

### 2. Feature Flags
```typescript
// Feature availability based on subscription
function useFeatureFlag(feature: string): boolean {
  const { currentTenant } = useTenantStore();
  return currentTenant?.features[feature] ?? false;
}

// Conditional rendering
function AdvancedAnalytics() {
  const hasAdvancedAnalytics = useFeatureFlag('advancedAnalytics');
  
  if (!hasAdvancedAnalytics) {
    return <UpgradePrompt feature="Advanced Analytics" />;
  }
  
  return <AnalyticsDashboard />;
}
```

### 3. SSO Integration
- Support **SAML 2.0**, **OAuth 2.0**, and **LDAP**
- Implement **seamless authentication** flows
- Handle **tenant-specific** auth configurations

## üß™ Testing Requirements

### 1. Testing Strategy
- **60% Unit Tests**: Components, hooks, services
- **30% Integration Tests**: API interactions, user flows
- **10% E2E Tests**: Critical user journeys

### 2. Test Structure
```typescript
// Component testing with React Testing Library
describe('InterviewRoom', () => {
  it('starts recording when button is clicked', async () => {
    const onStart = vi.fn();
    render(<InterviewRoom onStartRecording={onStart} />);
    
    await user.click(screen.getByRole('button', { name: /start recording/i }));
    
    expect(onStart).toHaveBeenCalledTimes(1);
  });
});
```

### 3. Mock Patterns
```typescript
// Service mocking
vi.mock('@/modules/interviews/services/InterviewService', () => ({
  interviewService: {
    startInterview: vi.fn(),
    getNextQuestion: vi.fn(),
    submitResponse: vi.fn(),
  },
}));
```

## üîí Security & Privacy

### 1. Data Protection
- **FERPA compliance** for educational records
- **GDPR compliance** for EU users
- **Client-side encryption** for sensitive data
- **Secure token storage** with encryption

### 2. Content Security Policy
```typescript
// Strict CSP headers
const cspHeaders = {
  'Content-Security-Policy': [
    "default-src 'self'",
    "script-src 'self' 'unsafe-inline' https://www.google-analytics.com",
    "style-src 'self' 'unsafe-inline' https://fonts.googleapis.com",
    "connect-src 'self' https://api.prepwise.com wss://api.prepwise.com",
    "media-src 'self' blob:",
  ].join('; '),
};
```

### 3. Input Sanitization
```typescript
// Sanitize all user inputs
function sanitizeInput(input: string): string {
  return input
    .replace(/[<>]/g, '')
    .replace(/javascript:/gi, '')
    .replace(/on\w+\s*=/gi, '')
    .trim();
}
```

## üìä Performance Standards

### 1. Core Web Vitals Targets
- **LCP**: < 2.5s (Largest Contentful Paint)
- **FID**: < 100ms (First Input Delay)
- **CLS**: < 0.1 (Cumulative Layout Shift)

### 2. Bundle Size Limits
- **Initial bundle**: < 250KB gzipped
- **Route chunks**: < 100KB gzipped
- **Vendor chunks**: Split by usage frequency

### 3. Image Optimization
```typescript
// Responsive images with WebP support
<picture>
  <source type="image/webp" srcSet={generateWebPSrcSet(src)} />
  <img src={src} alt={alt} loading="lazy" />
</picture>
```

## üöÄ Development Workflow

### 1. Git Workflow
```bash
# Branch naming
feature/PREP-123-add-video-analysis
bugfix/PREP-456-fix-login-error
hotfix/PREP-789-security-patch

# Commit messages (Conventional Commits)
feat(interviews): add facial expression analysis
fix(auth): resolve token refresh issue
docs(readme): update setup instructions
```

### 2. Code Quality Gates
- **TypeScript**: No errors, strict mode
- **ESLint**: No warnings or errors
- **Prettier**: Consistent formatting
- **Tests**: 80%+ coverage for new code

### 3. Pre-commit Hooks
```json
{
  "lint-staged": {
    "*.{ts,tsx}": ["eslint --fix", "prettier --write"],
    "*.{json,md,css}": ["prettier --write"]
  }
}
```

## üéØ Teaching Methodology

### 1. Step-by-Step Approach
- **Theory First**: Explain WHY before HOW
- **Checkpoint Questions**: Verify understanding
- **Practical Application**: Hands-on implementation
- **Verification**: Test what was built

### 2. Interactive Development
- Ask **clarifying questions** before proceeding
- Explain **design decisions** and alternatives
- Provide **learning context** for patterns
- Include **checkpoint confirmations**

### 3. No Black Boxes
- Explain **every component** and its purpose
- Show **how pieces connect** together
- Discuss **trade-offs** and alternatives
- Provide **context** for architectural decisions

## üìã Quick Reference Checklist

### Before Starting Any Task:
- [ ] Understand the **business context**
- [ ] Check **existing patterns** in codebase
- [ ] Verify **design system** components available
- [ ] Consider **multi-tenant** implications
- [ ] Plan **testing strategy**

### For New Components:
- [ ] Add proper **file header**
- [ ] Use **TypeScript** with full typing
- [ ] Follow **component structure** pattern
- [ ] Implement **accessibility** features
- [ ] Add **unit tests**
- [ ] Update **Storybook** if applicable

### For API Integration:
- [ ] Use **React Query** for server state
- [ ] Implement **error handling**
- [ ] Add **loading states**
- [ ] Consider **caching strategy**
- [ ] Handle **tenant context**

### For Styling:
- [ ] Use **design system** components first
- [ ] Follow **Tailwind CSS** patterns
- [ ] Implement **responsive design**
- [ ] Test **accessibility**
- [ ] Verify **brand consistency**

## üéì Remember: This is an Educational Platform

Always consider:
- **Student privacy** and data protection
- **School administrator** needs and workflows
- **Scalability** for multiple institutions
- **Accessibility** for diverse users
- **Performance** for global usage
- **Security** for sensitive educational data

When in doubt, ask questions and explain your reasoning. The goal is to build a robust, scalable, and user-friendly platform that truly helps students succeed in their career preparation. 