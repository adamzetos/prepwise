# PrepWise Project - Cursor AI Rules
# Classification: ADAMCHINS-CONFIDENTIAL ▲
# Last Updated: Complete Website Implementation - All 15 Pages

## Project Context
You are working on PrepWise - an AI-powered mock interview platform for business schools. The entire website has been successfully imported from Figma designs into React code with pixel-perfect accuracy.

## CRITICAL RULES - FIGMA TO CODE IMPORTS

### 1. BEFORE WRITING ANY CODE
ALWAYS:
- Analyze the Figma design/PNG thoroughly
- List ALL components visible in the design
- Request export of ALL assets (images, icons, logos) FIRST
- Verify asset filenames have NO SPACES (use underscores)
- Note exact text content from the design
- Create a component checklist
- Plan component reusability across pages

NEVER:
- Start coding before assets are exported
- Create components that don't exist in the design
- Use placeholder/stock images
- Guess at colors or spacing
- Use filenames with spaces

### 2. ASSET PATHS & STRUCTURE
```
/public/
├── logo.svg              # Main PrepWise logo
├── hero-bg.jpg          # Hero background
├── Interviewer.jpg      # Interview simulation
├── You.jpg              # User video placeholder
└── icons/
    ├── favicon.svg      # Browser tab icon
    ├── avatar.svg       # User avatar
    ├── [feature].svg    # Feature icons
    ├── [student].svg/png # Student avatars
    └── [icon_name].svg  # Various UI icons
```
**CRITICAL**: Replace spaces with underscores in ALL filenames

### 3. CODING STANDARDS

#### MANDATORY: Use Inline Styles
```typescript
// ✅ CORRECT - Always use inline styles
const style = {
  backgroundColor: '#ffffff',
  padding: '20px',
};

// ❌ WRONG - Never use Tailwind/className
<div className="bg-white p-5">
```

#### Component Template
```typescript
/**
 * ADAMCHINS PrepWise
 * Classification: ADAMCHINS-CONFIDENTIAL ▲
 * Component: [Name]
 * Purpose: [What it does]
 * Why Needed: [Business reason]
 */

import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';

export function ComponentName() {
  const navigate = useNavigate();
  
  const sectionStyle = {
    // Use exact values from Figma
  };
  
  return (
    <section style={sectionStyle}>
      {/* Content */}
    </section>
  );
}
```

### 4. NAVIGATION COMPONENTS
Three distinct navigation types:
1. **Navigation** - Public pages (landing, login, register)
2. **LoggedInNavigation** - Authenticated users
3. **AdminNavigation** - Admin dashboard pages

Route Structure:
```
/                    # Landing page
/login              # Login page  
/register           # Register page
/dashboard          # User dashboard
/upload             # Document upload
/sessions           # Interview history
/cv-review          # Document review
/job-role-selection # Role selection
/interview          # Interview simulation
/interview-complete # Completion screen
/score-breakdown    # Performance scores
/detailed-suggestions # Feedback details
/admin              # Admin dashboard
/admin/students     # Student management
```

### 5. COLOR PALETTE
```typescript
const colors = {
  primaryBlue: '#1a4d8c',      // Main brand color
  secondaryTeal: '#17B0A7',    // CTAs, highlights
  textDark: '#1f2d3d',         // Primary text
  textLight: '#6b7b8f',        // Secondary text
  background: '#f9fafb',       // Page background
  white: '#ffffff',            // Cards, sections
  border: '#e5e7eb',           // Borders
  borderLight: '#f3f4f6',      // Light borders
  formButton: '#9bb3d0',       // Form submit buttons
};
```

### 6. TYPOGRAPHY & SPACING
Font Stack:
```typescript
fontFamily: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif'
```

Standard Sizes:
- Title: 32px, weight 600
- Subtitle: 16-18px, weight 400
- Body: 14-15px, weight 400
- Small: 12-13px, weight 400

Spacing System:
- Section padding: 3rem 2rem
- Card padding: 2rem
- Button padding: 12px 24px (small), 14px 36px (large)
- Input padding: 12px 16px
- Border radius: 40px (primary buttons), 8px (secondary), 12px (cards)

### 7. COMMON PATTERNS

#### Hover Effects
```typescript
onMouseEnter={(e) => e.currentTarget.style.backgroundColor = '#163e70'}
onMouseLeave={(e) => e.currentTarget.style.backgroundColor = '#1a4d8c'}
```

#### Page Container
```typescript
const pageStyle = {
  minHeight: '100vh',
  backgroundColor: '#f9fafb',
  display: 'flex',
  flexDirection: 'column' as const,
  fontFamily: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif',
  WebkitFontSmoothing: 'antialiased' as const,
  MozOsxFontSmoothing: 'grayscale' as const,
};
```

#### Content Container
```typescript
const contentStyle = {
  flex: 1,
  padding: '3rem 2rem',
  maxWidth: '1200px', // or 1400px for admin
  margin: '0 auto',
  width: '100%',
};
```

### 8. ANIMATION PATTERNS

#### Progress Counter Animation
```typescript
useEffect(() => {
  const interval = setInterval(() => {
    setProgress(prev => {
      if (prev < target) {
        return Math.min(prev + 2, target);
      }
      clearInterval(interval);
      return prev;
    });
  }, 20);
}, []);
```

#### SVG Circle Progress
```typescript
const circumference = radius * 2 * Math.PI;
const strokeDashoffset = circumference - (progress / 100) * circumference;

<circle
  stroke={color}
  fill="transparent"
  strokeWidth={strokeWidth}
  strokeDasharray={circumference + ' ' + circumference}
  style={{
    strokeDashoffset,
    transition: 'stroke-dashoffset 0.5s ease',
    transform: 'rotate(-90deg)',
    transformOrigin: '50% 50%',
  }}
/>
```

### 9. COMPLETED PAGES STATUS
✅ ALL PAGES COMPLETED (15 Total):
1. Landing Page - Hero, features, navigation
2. Login Page - Split layout with validation
3. Register Page - Reused login components
4. Logged-in Landing Page - Dashboard entry
5. Document Upload Page - Multi-file support
6. Interview Sessions Page - History table
7. CV Review Page - Tabbed interface
8. Job Role Selection Page - Icon grid
9. Interview Simulation Page - Video chat UI
10. Interview Complete Page - Success screen
11. Score Breakdown Page - Animated charts
12. Detailed Suggestions Page - Expandable feedback
13. Admin Dashboard - Stats & line charts
14. Student Management Page - Paginated table

### 10. COMMON ISSUES & SOLUTIONS

| Issue | Solution |
|-------|----------|
| Layout broken | Use inline styles, check overflow |
| Assets not showing | Ensure paths start with `/` |
| Wrong colors | Use exact hex from Figma |
| Spacing off | Use exact px values |
| White SVGs invisible | Add filter or background |
| File not found | Check spaces in filename |
| Navigation fails | Import useNavigate correctly |
| Animation choppy | Use requestAnimationFrame |

### 11. QUALITY CHECKLIST
Before marking any component complete:
- [ ] Matches Figma design pixel-perfectly
- [ ] All assets loading correctly
- [ ] Exact colors and spacing
- [ ] Hover states implemented
- [ ] Click handlers working
- [ ] Navigation flows correctly
- [ ] Animations smooth
- [ ] Responsive behavior works
- [ ] No console errors
- [ ] Form validations working

### 12. KEY LEARNINGS

DO's:
- Plan component reusability upfront
- Check all assets exist before coding
- Use exact Figma values
- Test each component immediately
- Create consistent hover/active states
- Implement smooth animations
- Think about navigation flow

DON'Ts:
- Don't use spaces in filenames
- Don't approximate colors/spacing
- Don't skip hover states
- Don't hardcode repeated values
- Don't ignore console warnings
- Don't rush - quality over speed

## REMEMBER
- Export assets BEFORE coding
- Match Figma EXACTLY
- Use INLINE STYLES only
- Test FREQUENTLY
- ASK when uncertain
- REUSE components when possible

The PrepWise platform is now fully implemented with pixel-perfect accuracy!